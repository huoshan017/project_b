// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: format/record.proto

package core

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PbCmdData struct {
	Code                 int32    `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Args                 []int64  `protobuf:"varint,2,rep,packed,name=Args,proto3" json:"Args,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PbCmdData) Reset()         { *m = PbCmdData{} }
func (m *PbCmdData) String() string { return proto.CompactTextString(m) }
func (*PbCmdData) ProtoMessage()    {}
func (*PbCmdData) Descriptor() ([]byte, []int) {
	return fileDescriptor_74e7ba189358829b, []int{0}
}
func (m *PbCmdData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PbCmdData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PbCmdData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PbCmdData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PbCmdData.Merge(m, src)
}
func (m *PbCmdData) XXX_Size() int {
	return m.Size()
}
func (m *PbCmdData) XXX_DiscardUnknown() {
	xxx_messageInfo_PbCmdData.DiscardUnknown(m)
}

var xxx_messageInfo_PbCmdData proto.InternalMessageInfo

func (m *PbCmdData) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *PbCmdData) GetArgs() []int64 {
	if m != nil {
		return m.Args
	}
	return nil
}

type PbPlayerFrame struct {
	PlayerId             uint64       `protobuf:"varint,1,opt,name=PlayerId,proto3" json:"PlayerId,omitempty"`
	CmdList              []*PbCmdData `protobuf:"bytes,2,rep,name=CmdList,proto3" json:"CmdList,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *PbPlayerFrame) Reset()         { *m = PbPlayerFrame{} }
func (m *PbPlayerFrame) String() string { return proto.CompactTextString(m) }
func (*PbPlayerFrame) ProtoMessage()    {}
func (*PbPlayerFrame) Descriptor() ([]byte, []int) {
	return fileDescriptor_74e7ba189358829b, []int{1}
}
func (m *PbPlayerFrame) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PbPlayerFrame) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PbPlayerFrame.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PbPlayerFrame) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PbPlayerFrame.Merge(m, src)
}
func (m *PbPlayerFrame) XXX_Size() int {
	return m.Size()
}
func (m *PbPlayerFrame) XXX_DiscardUnknown() {
	xxx_messageInfo_PbPlayerFrame.DiscardUnknown(m)
}

var xxx_messageInfo_PbPlayerFrame proto.InternalMessageInfo

func (m *PbPlayerFrame) GetPlayerId() uint64 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *PbPlayerFrame) GetCmdList() []*PbCmdData {
	if m != nil {
		return m.CmdList
	}
	return nil
}

type PbFrameData struct {
	FrameNum             uint32           `protobuf:"varint,1,opt,name=FrameNum,proto3" json:"FrameNum,omitempty"`
	PlayerList           []*PbPlayerFrame `protobuf:"bytes,2,rep,name=PlayerList,proto3" json:"PlayerList,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *PbFrameData) Reset()         { *m = PbFrameData{} }
func (m *PbFrameData) String() string { return proto.CompactTextString(m) }
func (*PbFrameData) ProtoMessage()    {}
func (*PbFrameData) Descriptor() ([]byte, []int) {
	return fileDescriptor_74e7ba189358829b, []int{2}
}
func (m *PbFrameData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PbFrameData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PbFrameData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PbFrameData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PbFrameData.Merge(m, src)
}
func (m *PbFrameData) XXX_Size() int {
	return m.Size()
}
func (m *PbFrameData) XXX_DiscardUnknown() {
	xxx_messageInfo_PbFrameData.DiscardUnknown(m)
}

var xxx_messageInfo_PbFrameData proto.InternalMessageInfo

func (m *PbFrameData) GetFrameNum() uint32 {
	if m != nil {
		return m.FrameNum
	}
	return 0
}

func (m *PbFrameData) GetPlayerList() []*PbPlayerFrame {
	if m != nil {
		return m.PlayerList
	}
	return nil
}

type PbRecord struct {
	Name                 string         `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	MapId                int32          `protobuf:"varint,2,opt,name=MapId,proto3" json:"MapId,omitempty"`
	FrameMs              uint32         `protobuf:"varint,3,opt,name=FrameMs,proto3" json:"FrameMs,omitempty"`
	FrameNum             uint32         `protobuf:"varint,4,opt,name=FrameNum,proto3" json:"FrameNum,omitempty"`
	FrameList            []*PbFrameData `protobuf:"bytes,5,rep,name=FrameList,proto3" json:"FrameList,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *PbRecord) Reset()         { *m = PbRecord{} }
func (m *PbRecord) String() string { return proto.CompactTextString(m) }
func (*PbRecord) ProtoMessage()    {}
func (*PbRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_74e7ba189358829b, []int{3}
}
func (m *PbRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PbRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PbRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PbRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PbRecord.Merge(m, src)
}
func (m *PbRecord) XXX_Size() int {
	return m.Size()
}
func (m *PbRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_PbRecord.DiscardUnknown(m)
}

var xxx_messageInfo_PbRecord proto.InternalMessageInfo

func (m *PbRecord) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PbRecord) GetMapId() int32 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (m *PbRecord) GetFrameMs() uint32 {
	if m != nil {
		return m.FrameMs
	}
	return 0
}

func (m *PbRecord) GetFrameNum() uint32 {
	if m != nil {
		return m.FrameNum
	}
	return 0
}

func (m *PbRecord) GetFrameList() []*PbFrameData {
	if m != nil {
		return m.FrameList
	}
	return nil
}

func init() {
	proto.RegisterType((*PbCmdData)(nil), "core.PbCmdData")
	proto.RegisterType((*PbPlayerFrame)(nil), "core.PbPlayerFrame")
	proto.RegisterType((*PbFrameData)(nil), "core.PbFrameData")
	proto.RegisterType((*PbRecord)(nil), "core.PbRecord")
}

func init() { proto.RegisterFile("format/record.proto", fileDescriptor_74e7ba189358829b) }

var fileDescriptor_74e7ba189358829b = []byte{
	// 295 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0xdd, 0x26, 0x31, 0xc9, 0x94, 0x22, 0x6e, 0x3d, 0xc4, 0x1e, 0x42, 0xc9, 0xa9, 0x5e,
	0x12, 0x30, 0x4f, 0xa0, 0x11, 0xa1, 0x60, 0x4b, 0xd8, 0x83, 0x07, 0x0f, 0xc2, 0x6e, 0x77, 0x15,
	0xc1, 0x65, 0xcb, 0x26, 0x1e, 0x7c, 0x13, 0xc1, 0x17, 0xf2, 0xe8, 0x23, 0x48, 0x7c, 0x11, 0xc9,
	0x84, 0xc4, 0xe8, 0xed, 0xff, 0x93, 0x99, 0x7f, 0xbe, 0x99, 0x85, 0xf9, 0x83, 0xb1, 0x9a, 0xd7,
	0x99, 0x55, 0x3b, 0x63, 0x65, 0xba, 0xb7, 0xa6, 0x36, 0xd4, 0xdd, 0x19, 0xab, 0x92, 0x1c, 0xc2,
	0x52, 0x14, 0x5a, 0x5e, 0xf1, 0x9a, 0x53, 0x0a, 0x6e, 0x61, 0xa4, 0x8a, 0xc8, 0x92, 0xac, 0x3c,
	0x86, 0xba, 0xfd, 0x76, 0x61, 0x1f, 0xab, 0x68, 0xb2, 0x74, 0x56, 0x0e, 0x43, 0x9d, 0xdc, 0xc2,
	0xac, 0x14, 0xe5, 0x33, 0x7f, 0x55, 0xf6, 0xda, 0x72, 0xad, 0xe8, 0x02, 0x82, 0xce, 0xae, 0x25,
	0x36, 0xbb, 0x6c, 0xf0, 0xf4, 0x0c, 0xfc, 0x42, 0xcb, 0x9b, 0xa7, 0xaa, 0xc6, 0x8c, 0xe9, 0xf9,
	0x51, 0xda, 0x4e, 0x4e, 0x87, 0xb1, 0xac, 0xff, 0x9f, 0xdc, 0xc3, 0xb4, 0x14, 0x98, 0x88, 0x38,
	0x0b, 0x08, 0xd0, 0x6c, 0x5f, 0x34, 0xa6, 0xce, 0xd8, 0xe0, 0x69, 0x0e, 0xd0, 0x4d, 0x18, 0x05,
	0xcf, 0xfb, 0xe0, 0x11, 0x1a, 0x1b, 0x95, 0x25, 0xef, 0x04, 0x82, 0x52, 0x30, 0xbc, 0x42, 0xbb,
	0xd8, 0x96, 0xeb, 0x6e, 0xd9, 0x90, 0xa1, 0xa6, 0x27, 0xe0, 0x6d, 0xf8, 0x7e, 0x2d, 0xa3, 0x09,
	0x5e, 0xa0, 0x33, 0x34, 0x02, 0x1f, 0xb3, 0x36, 0x55, 0xe4, 0x20, 0x46, 0x6f, 0xff, 0x10, 0xba,
	0xff, 0x08, 0x33, 0x08, 0x51, 0x23, 0xa0, 0x87, 0x80, 0xc7, 0x3d, 0xe0, 0xb0, 0x23, 0xfb, 0xad,
	0xb9, 0x3c, 0xfd, 0x68, 0x62, 0xf2, 0xd9, 0xc4, 0xe4, 0xab, 0x89, 0xc9, 0xdb, 0x77, 0x7c, 0x70,
	0xe7, 0xa7, 0x69, 0xd6, 0x76, 0x88, 0x43, 0x7c, 0xb2, 0xfc, 0x27, 0x00, 0x00, 0xff, 0xff, 0x8e,
	0x62, 0x4e, 0x9a, 0xc9, 0x01, 0x00, 0x00,
}

func (m *PbCmdData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PbCmdData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PbCmdData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Args) > 0 {
		dAtA2 := make([]byte, len(m.Args)*10)
		var j1 int
		for _, num1 := range m.Args {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintRecord(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintRecord(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PbPlayerFrame) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PbPlayerFrame) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PbPlayerFrame) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CmdList) > 0 {
		for iNdEx := len(m.CmdList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CmdList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRecord(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.PlayerId != 0 {
		i = encodeVarintRecord(dAtA, i, uint64(m.PlayerId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PbFrameData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PbFrameData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PbFrameData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PlayerList) > 0 {
		for iNdEx := len(m.PlayerList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PlayerList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRecord(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.FrameNum != 0 {
		i = encodeVarintRecord(dAtA, i, uint64(m.FrameNum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PbRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PbRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PbRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FrameList) > 0 {
		for iNdEx := len(m.FrameList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FrameList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRecord(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.FrameNum != 0 {
		i = encodeVarintRecord(dAtA, i, uint64(m.FrameNum))
		i--
		dAtA[i] = 0x20
	}
	if m.FrameMs != 0 {
		i = encodeVarintRecord(dAtA, i, uint64(m.FrameMs))
		i--
		dAtA[i] = 0x18
	}
	if m.MapId != 0 {
		i = encodeVarintRecord(dAtA, i, uint64(m.MapId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintRecord(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRecord(dAtA []byte, offset int, v uint64) int {
	offset -= sovRecord(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PbCmdData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovRecord(uint64(m.Code))
	}
	if len(m.Args) > 0 {
		l = 0
		for _, e := range m.Args {
			l += sovRecord(uint64(e))
		}
		n += 1 + sovRecord(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PbPlayerFrame) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != 0 {
		n += 1 + sovRecord(uint64(m.PlayerId))
	}
	if len(m.CmdList) > 0 {
		for _, e := range m.CmdList {
			l = e.Size()
			n += 1 + l + sovRecord(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PbFrameData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FrameNum != 0 {
		n += 1 + sovRecord(uint64(m.FrameNum))
	}
	if len(m.PlayerList) > 0 {
		for _, e := range m.PlayerList {
			l = e.Size()
			n += 1 + l + sovRecord(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PbRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRecord(uint64(l))
	}
	if m.MapId != 0 {
		n += 1 + sovRecord(uint64(m.MapId))
	}
	if m.FrameMs != 0 {
		n += 1 + sovRecord(uint64(m.FrameMs))
	}
	if m.FrameNum != 0 {
		n += 1 + sovRecord(uint64(m.FrameNum))
	}
	if len(m.FrameList) > 0 {
		for _, e := range m.FrameList {
			l = e.Size()
			n += 1 + l + sovRecord(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRecord(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRecord(x uint64) (n int) {
	return sovRecord(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PbCmdData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PbCmdData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PbCmdData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRecord
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Args = append(m.Args, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRecord
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRecord
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthRecord
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Args) == 0 {
					m.Args = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRecord
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Args = append(m.Args, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PbPlayerFrame) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PbPlayerFrame: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PbPlayerFrame: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			m.PlayerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmdList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CmdList = append(m.CmdList, &PbCmdData{})
			if err := m.CmdList[len(m.CmdList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PbFrameData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PbFrameData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PbFrameData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrameNum", wireType)
			}
			m.FrameNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FrameNum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerList = append(m.PlayerList, &PbPlayerFrame{})
			if err := m.PlayerList[len(m.PlayerList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PbRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PbRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PbRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			m.MapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrameMs", wireType)
			}
			m.FrameMs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FrameMs |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrameNum", wireType)
			}
			m.FrameNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FrameNum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrameList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FrameList = append(m.FrameList, &PbFrameData{})
			if err := m.FrameList[len(m.FrameList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRecord(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRecord
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRecord
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRecord
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRecord
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRecord        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRecord          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRecord = fmt.Errorf("proto: unexpected end of group")
)
