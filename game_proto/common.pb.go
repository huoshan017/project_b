// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: common.proto

package game_proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Pos struct {
	X                    int32    `protobuf:"varint,1,opt,name=X,proto3" json:"X,omitempty"`
	Y                    int32    `protobuf:"varint,2,opt,name=Y,proto3" json:"Y,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Pos) Reset()         { *m = Pos{} }
func (m *Pos) String() string { return proto.CompactTextString(m) }
func (*Pos) ProtoMessage()    {}
func (*Pos) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{0}
}
func (m *Pos) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pos) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pos.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pos) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pos.Merge(m, src)
}
func (m *Pos) XXX_Size() int {
	return m.Size()
}
func (m *Pos) XXX_DiscardUnknown() {
	xxx_messageInfo_Pos.DiscardUnknown(m)
}

var xxx_messageInfo_Pos proto.InternalMessageInfo

func (m *Pos) GetX() int32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Pos) GetY() int32 {
	if m != nil {
		return m.Y
	}
	return 0
}

// 坦克信息
type TankInfo struct {
	Id                   int32    `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	InstId               uint32   `protobuf:"varint,2,opt,name=InstId,proto3" json:"InstId,omitempty"`
	Level                int32    `protobuf:"varint,3,opt,name=Level,proto3" json:"Level,omitempty"`
	CurrPos              *Pos     `protobuf:"bytes,4,opt,name=CurrPos,proto3" json:"CurrPos,omitempty"`
	Direction            int32    `protobuf:"varint,5,opt,name=Direction,proto3" json:"Direction,omitempty"`
	CurrSpeed            int32    `protobuf:"varint,6,opt,name=CurrSpeed,proto3" json:"CurrSpeed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TankInfo) Reset()         { *m = TankInfo{} }
func (m *TankInfo) String() string { return proto.CompactTextString(m) }
func (*TankInfo) ProtoMessage()    {}
func (*TankInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{1}
}
func (m *TankInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TankInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TankInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TankInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TankInfo.Merge(m, src)
}
func (m *TankInfo) XXX_Size() int {
	return m.Size()
}
func (m *TankInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TankInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TankInfo proto.InternalMessageInfo

func (m *TankInfo) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TankInfo) GetInstId() uint32 {
	if m != nil {
		return m.InstId
	}
	return 0
}

func (m *TankInfo) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *TankInfo) GetCurrPos() *Pos {
	if m != nil {
		return m.CurrPos
	}
	return nil
}

func (m *TankInfo) GetDirection() int32 {
	if m != nil {
		return m.Direction
	}
	return 0
}

func (m *TankInfo) GetCurrSpeed() int32 {
	if m != nil {
		return m.CurrSpeed
	}
	return 0
}

// 坦克移动信息
type TankMoveInfo struct {
	CurrPos              *Pos     `protobuf:"bytes,1,opt,name=CurrPos,proto3" json:"CurrPos,omitempty"`
	Direction            int32    `protobuf:"varint,2,opt,name=Direction,proto3" json:"Direction,omitempty"`
	CurrSpeed            int32    `protobuf:"varint,3,opt,name=CurrSpeed,proto3" json:"CurrSpeed,omitempty"`
	CurrTimeMilliseconds int64    `protobuf:"varint,4,opt,name=CurrTimeMilliseconds,proto3" json:"CurrTimeMilliseconds,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TankMoveInfo) Reset()         { *m = TankMoveInfo{} }
func (m *TankMoveInfo) String() string { return proto.CompactTextString(m) }
func (*TankMoveInfo) ProtoMessage()    {}
func (*TankMoveInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{2}
}
func (m *TankMoveInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TankMoveInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TankMoveInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TankMoveInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TankMoveInfo.Merge(m, src)
}
func (m *TankMoveInfo) XXX_Size() int {
	return m.Size()
}
func (m *TankMoveInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TankMoveInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TankMoveInfo proto.InternalMessageInfo

func (m *TankMoveInfo) GetCurrPos() *Pos {
	if m != nil {
		return m.CurrPos
	}
	return nil
}

func (m *TankMoveInfo) GetDirection() int32 {
	if m != nil {
		return m.Direction
	}
	return 0
}

func (m *TankMoveInfo) GetCurrSpeed() int32 {
	if m != nil {
		return m.CurrSpeed
	}
	return 0
}

func (m *TankMoveInfo) GetCurrTimeMilliseconds() int64 {
	if m != nil {
		return m.CurrTimeMilliseconds
	}
	return 0
}

// 玩家坦克信息
type PlayerTankInfo struct {
	PlayerId             uint64    `protobuf:"varint,1,opt,name=PlayerId,proto3" json:"PlayerId,omitempty"`
	TankInfo             *TankInfo `protobuf:"bytes,2,opt,name=TankInfo,proto3" json:"TankInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *PlayerTankInfo) Reset()         { *m = PlayerTankInfo{} }
func (m *PlayerTankInfo) String() string { return proto.CompactTextString(m) }
func (*PlayerTankInfo) ProtoMessage()    {}
func (*PlayerTankInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{3}
}
func (m *PlayerTankInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerTankInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerTankInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerTankInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerTankInfo.Merge(m, src)
}
func (m *PlayerTankInfo) XXX_Size() int {
	return m.Size()
}
func (m *PlayerTankInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerTankInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerTankInfo proto.InternalMessageInfo

func (m *PlayerTankInfo) GetPlayerId() uint64 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *PlayerTankInfo) GetTankInfo() *TankInfo {
	if m != nil {
		return m.TankInfo
	}
	return nil
}

// 玩家帐号和坦克信息
type PlayerAccountTankInfo struct {
	PlayerId             uint64    `protobuf:"varint,1,opt,name=PlayerId,proto3" json:"PlayerId,omitempty"`
	Account              string    `protobuf:"bytes,2,opt,name=Account,proto3" json:"Account,omitempty"`
	TankInfo             *TankInfo `protobuf:"bytes,3,opt,name=TankInfo,proto3" json:"TankInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *PlayerAccountTankInfo) Reset()         { *m = PlayerAccountTankInfo{} }
func (m *PlayerAccountTankInfo) String() string { return proto.CompactTextString(m) }
func (*PlayerAccountTankInfo) ProtoMessage()    {}
func (*PlayerAccountTankInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{4}
}
func (m *PlayerAccountTankInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerAccountTankInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerAccountTankInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerAccountTankInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerAccountTankInfo.Merge(m, src)
}
func (m *PlayerAccountTankInfo) XXX_Size() int {
	return m.Size()
}
func (m *PlayerAccountTankInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerAccountTankInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerAccountTankInfo proto.InternalMessageInfo

func (m *PlayerAccountTankInfo) GetPlayerId() uint64 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *PlayerAccountTankInfo) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *PlayerAccountTankInfo) GetTankInfo() *TankInfo {
	if m != nil {
		return m.TankInfo
	}
	return nil
}

func init() {
	proto.RegisterType((*Pos)(nil), "game_proto.Pos")
	proto.RegisterType((*TankInfo)(nil), "game_proto.TankInfo")
	proto.RegisterType((*TankMoveInfo)(nil), "game_proto.TankMoveInfo")
	proto.RegisterType((*PlayerTankInfo)(nil), "game_proto.PlayerTankInfo")
	proto.RegisterType((*PlayerAccountTankInfo)(nil), "game_proto.PlayerAccountTankInfo")
}

func init() { proto.RegisterFile("common.proto", fileDescriptor_555bd8c177793206) }

var fileDescriptor_555bd8c177793206 = []byte{
	// 347 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x51, 0xcb, 0x4a, 0xc3, 0x40,
	0x14, 0x75, 0x92, 0x3e, 0x6f, 0x1f, 0xc2, 0x50, 0x65, 0x10, 0x89, 0x35, 0xab, 0xba, 0x89, 0x52,
	0xbf, 0xc0, 0xc7, 0x26, 0x60, 0x21, 0x8c, 0x5d, 0xb4, 0x2e, 0x94, 0x9a, 0x8c, 0x12, 0x4c, 0x66,
	0x4a, 0x92, 0x16, 0x5c, 0xf9, 0x1b, 0xfe, 0x82, 0x2b, 0x7f, 0xc3, 0xa5, 0x9f, 0x20, 0xf5, 0x47,
	0x24, 0x33, 0x69, 0x52, 0x45, 0xa4, 0xae, 0x66, 0xce, 0x3d, 0xe7, 0xce, 0x39, 0xf7, 0x0e, 0x34,
	0x5d, 0x11, 0x86, 0x82, 0x5b, 0xd3, 0x48, 0x24, 0x02, 0xc3, 0xfd, 0x24, 0x64, 0x37, 0xf2, 0x6e,
	0xee, 0x83, 0xee, 0x88, 0x18, 0x37, 0x01, 0x8d, 0x08, 0xea, 0xa2, 0x5e, 0x99, 0xa2, 0x51, 0x8a,
	0xc6, 0x44, 0x53, 0x68, 0x6c, 0xbe, 0x22, 0xa8, 0x0d, 0x27, 0xfc, 0xc1, 0xe6, 0x77, 0x02, 0xb7,
	0x41, 0xb3, 0xbd, 0x4c, 0xa9, 0xd9, 0x1e, 0xde, 0x86, 0x8a, 0xcd, 0xe3, 0xc4, 0xf6, 0xa4, 0xbe,
	0x45, 0x33, 0x84, 0x3b, 0x50, 0xbe, 0x60, 0x73, 0x16, 0x10, 0x5d, 0x4a, 0x15, 0xc0, 0x07, 0x50,
	0x3d, 0x9b, 0x45, 0x91, 0x23, 0x62, 0x52, 0xea, 0xa2, 0x5e, 0xa3, 0xbf, 0x69, 0x15, 0x59, 0x2c,
	0x47, 0xc4, 0x74, 0xc9, 0xe3, 0x5d, 0xa8, 0x9f, 0xfb, 0x11, 0x73, 0x13, 0x5f, 0x70, 0x52, 0x96,
	0x8f, 0x14, 0x85, 0x94, 0x4d, 0x85, 0x97, 0x53, 0xc6, 0x3c, 0x52, 0x51, 0x6c, 0x5e, 0x30, 0x5f,
	0x10, 0x34, 0xd3, 0xc4, 0x03, 0x31, 0x67, 0x32, 0xf5, 0x8a, 0x2f, 0xfa, 0x8f, 0xaf, 0xf6, 0xa7,
	0xaf, 0xfe, 0xc3, 0x17, 0xf7, 0xa1, 0x93, 0x82, 0xa1, 0x1f, 0xb2, 0x81, 0x1f, 0x04, 0x7e, 0xcc,
	0x5c, 0xc1, 0x3d, 0x35, 0xab, 0x4e, 0x7f, 0xe5, 0xcc, 0x6b, 0x68, 0x3b, 0xc1, 0xe4, 0x91, 0x45,
	0xf9, 0x8a, 0x77, 0xa0, 0xa6, 0x2a, 0xd9, 0xa2, 0x4b, 0x34, 0xc7, 0xf8, 0xa8, 0xf8, 0x0a, 0x19,
	0xae, 0xd1, 0xef, 0xac, 0x4e, 0xb2, 0xe4, 0x68, 0xae, 0x32, 0x9f, 0x60, 0x4b, 0x75, 0x9f, 0xb8,
	0xae, 0x98, 0xf1, 0x64, 0x2d, 0x1b, 0x02, 0xd5, 0x4c, 0x2e, 0x5d, 0xea, 0x74, 0x09, 0xbf, 0x05,
	0xd0, 0xd7, 0x09, 0x70, 0xba, 0xf7, 0xb6, 0x30, 0xd0, 0xfb, 0xc2, 0x40, 0x1f, 0x0b, 0x03, 0x3d,
	0x7f, 0x1a, 0x1b, 0x57, 0x2d, 0xcb, 0x3a, 0x2c, 0x7a, 0x6e, 0x2b, 0xf2, 0x38, 0xfe, 0x0a, 0x00,
	0x00, 0xff, 0xff, 0x76, 0xbe, 0xf7, 0x22, 0xa5, 0x02, 0x00, 0x00,
}

func (m *Pos) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pos) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pos) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Y != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Y))
		i--
		dAtA[i] = 0x10
	}
	if m.X != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.X))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TankInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TankInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TankInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CurrSpeed != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.CurrSpeed))
		i--
		dAtA[i] = 0x30
	}
	if m.Direction != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Direction))
		i--
		dAtA[i] = 0x28
	}
	if m.CurrPos != nil {
		{
			size, err := m.CurrPos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Level != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x18
	}
	if m.InstId != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.InstId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TankMoveInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TankMoveInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TankMoveInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CurrTimeMilliseconds != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.CurrTimeMilliseconds))
		i--
		dAtA[i] = 0x20
	}
	if m.CurrSpeed != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.CurrSpeed))
		i--
		dAtA[i] = 0x18
	}
	if m.Direction != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Direction))
		i--
		dAtA[i] = 0x10
	}
	if m.CurrPos != nil {
		{
			size, err := m.CurrPos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PlayerTankInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerTankInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerTankInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TankInfo != nil {
		{
			size, err := m.TankInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.PlayerId != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.PlayerId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PlayerAccountTankInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerAccountTankInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerAccountTankInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TankInfo != nil {
		{
			size, err := m.TankInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0x12
	}
	if m.PlayerId != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.PlayerId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCommon(dAtA []byte, offset int, v uint64) int {
	offset -= sovCommon(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Pos) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.X != 0 {
		n += 1 + sovCommon(uint64(m.X))
	}
	if m.Y != 0 {
		n += 1 + sovCommon(uint64(m.Y))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TankInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCommon(uint64(m.Id))
	}
	if m.InstId != 0 {
		n += 1 + sovCommon(uint64(m.InstId))
	}
	if m.Level != 0 {
		n += 1 + sovCommon(uint64(m.Level))
	}
	if m.CurrPos != nil {
		l = m.CurrPos.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Direction != 0 {
		n += 1 + sovCommon(uint64(m.Direction))
	}
	if m.CurrSpeed != 0 {
		n += 1 + sovCommon(uint64(m.CurrSpeed))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TankMoveInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrPos != nil {
		l = m.CurrPos.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Direction != 0 {
		n += 1 + sovCommon(uint64(m.Direction))
	}
	if m.CurrSpeed != 0 {
		n += 1 + sovCommon(uint64(m.CurrSpeed))
	}
	if m.CurrTimeMilliseconds != 0 {
		n += 1 + sovCommon(uint64(m.CurrTimeMilliseconds))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerTankInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != 0 {
		n += 1 + sovCommon(uint64(m.PlayerId))
	}
	if m.TankInfo != nil {
		l = m.TankInfo.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerAccountTankInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != 0 {
		n += 1 + sovCommon(uint64(m.PlayerId))
	}
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.TankInfo != nil {
		l = m.TankInfo.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCommon(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCommon(x uint64) (n int) {
	return sovCommon(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Pos) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pos: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pos: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			m.X = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.X |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			m.Y = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Y |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TankInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TankInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TankInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstId", wireType)
			}
			m.InstId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrPos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CurrPos == nil {
				m.CurrPos = &Pos{}
			}
			if err := m.CurrPos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Direction", wireType)
			}
			m.Direction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Direction |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrSpeed", wireType)
			}
			m.CurrSpeed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrSpeed |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TankMoveInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TankMoveInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TankMoveInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrPos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CurrPos == nil {
				m.CurrPos = &Pos{}
			}
			if err := m.CurrPos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Direction", wireType)
			}
			m.Direction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Direction |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrSpeed", wireType)
			}
			m.CurrSpeed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrSpeed |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrTimeMilliseconds", wireType)
			}
			m.CurrTimeMilliseconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrTimeMilliseconds |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerTankInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerTankInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerTankInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			m.PlayerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TankInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TankInfo == nil {
				m.TankInfo = &TankInfo{}
			}
			if err := m.TankInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerAccountTankInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerAccountTankInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerAccountTankInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			m.PlayerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TankInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TankInfo == nil {
				m.TankInfo = &TankInfo{}
			}
			if err := m.TankInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCommon(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCommon
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCommon
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCommon
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCommon        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCommon          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCommon = fmt.Errorf("proto: unexpected end of group")
)
